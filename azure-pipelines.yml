trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

steps:
  # 1) On s'assure bien que le code est bien checkouté
  - checkout: self

  # 2) On installe Java 11
  - task: JavaToolInstaller@0
    displayName: 'Installer Java 11'
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  # 3) Debug : afficher la structure du workspace avant Maven
  - script: |
      echo "=== Contenu du workspace avant Maven ==="
      ls -R $(System.DefaultWorkingDirectory)
    displayName: 'Debug – afficher workspace avant Maven'

  # 4) Build et package Maven
  - task: Maven@3
    displayName: 'Build et package Maven'
    inputs:
      mavenPomFile: 'saraha/pom.xml'
      goals: 'clean package'

  # 5) Debug : vérifier qu'on a bien target/ après Maven
  - script: |
      echo "=== Contenu du workspace après Maven ==="
      ls -R $(System.DefaultWorkingDirectory)
    displayName: 'Debug – afficher workspace après Maven'

  # 6) On copie le JAR généré depuis le dossier target
  - task: CopyFiles@2
    displayName: 'Stage artifact'
    inputs:
      SourceFolder: '(System.DefaultWorkingDirectory)/saraha/target'
      Contents: '*.jar'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  # 7) On publie cet artifact pour qu’il soit disponible en CI/CD
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'spring-app-artifact'
      publishLocation: 'Container'
