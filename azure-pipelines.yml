trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

steps:
  # On s'assure bien que le code est bien checkouté
  - checkout: self

  # On installe Java 11
  - task: JavaToolInstaller@0
    displayName: 'Installer Java 11'
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  #  Debug : afficher la structure du workspace avant Maven
  - script: |
      echo "=== Contenu du workspace avant Maven ==="
      ls -R $(System.DefaultWorkingDirectory)
    displayName: 'Debug – afficher workspace avant Maven'

  #  Build et package Maven
  - task: Maven@3
    displayName: 'Build et package Maven'
    inputs:
      mavenPomFile: 'saraha/pom.xml'
      goals: 'clean package'
      options: '-DskipTests'

  #  Debug : vérifier qu'on a bien target/ après Maven
  - script: |
      echo "=== Contenu du workspace après Maven ==="
      ls -R $(System.DefaultWorkingDirectory)
    displayName: 'Debug – afficher workspace après Maven'

  #  On copie le JAR généré depuis le dossier target
  - task: CopyFiles@2
    displayName: 'Stage artifact'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)/saraha/target'
      Contents: '*.jar'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  # On publie cet artifact pour qu’il soit disponible en CI/CD
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'spring-app-artifact'
      publishLocation: 'Container'
  - task: XplatGenerateReleaseNotes@4
    inputs:
      outputfile: '$(Build.Repository.LocalPath)\releasenotes_$(Build.BuildId).md'
      templateLocation: 'InLine'
      inlinetemplate: |
        ## Build {{buildDetails.buildNumber}}
        * **Branch**: {{buildDetails.sourceBranch}}
        * **Author**: {{buildDetails.requestedFor.displayName}}
        * **Commit**: {{buildDetails.sourceVersion}}
      dumpPayloadToConsole: false
      dumpPayloadToFile: false
      replaceFile: True
      getParentsAndChildren: False
      getAllParents: False
      getIndirectPullRequests: False
      checkForManuallyLinkedWI: False
      wiqlFromTarget: 'WorkItems'
      considerPartiallySuccessfulReleases: False
      stopOnError: False
  - task: CopyFiles@2
    displayName: 'Copy Release Notes to Wiki Folder'
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)'
      Contents: 'releasenotes_$(Build.BuildId).md'
      TargetFolder: '$(Build.Repository.LocalPath)/wiki'
      CleanTargetFolder: true
      Overwrite: true
  - script: |
      rm -f "$(Build.Repository.LocalPath)/releasenotes_$(Build.BuildId).md"
    displayName: 'Delete Original Release Notes File'
  
  # Place juste avant ta tâche CmdLine@2
  - checkout: self
    persistCredentials: true     # <— permet d’utiliser $(SYSTEM_ACCESSTOKEN) pour le push



  - task: CmdLine@2
    displayName: 'Commit Release Notes to Wiki Folder'
    inputs:
      script: |
        set -e

     
        git fetch origin main:main

     
        git checkout main

    
        git pull origin main

     
        git config user.email "bilel.bouazizi3@hotmail.com"
        git config user.name  "bilel bouazizi"

     
        git add wiki/

     
        if ! git diff --cached --quiet; then
          git commit -m "[skip ci] Update release notes in wiki folder"
          git push origin main
        else
          echo "No changes to commit"
        fi







 
